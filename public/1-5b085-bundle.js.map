{"version":3,"sources":["webpack:///./src/js/formatData.js"],"names":["formatData","features","feature","worldData","objects","countries","sort","a","b","aName","properties","name","bName","localeCompare","sensitivity","regionNames","Array","from","Set","map","d","region","unshift","includes","splice","indexOf","regions","regionName","regionObject","cases","getSummedRegionCasesByYear","vaccination","getAverageRegionVaccinationByYear","code","borders","mesh","simpleFeatures","simplifiedData","simplified"],"mappings":"sxykBAAA,8CAwHeA,UAhHI,WAAM,IAUhBC,EAAaC,YAAQC,EAAWA,EAAUC,QAAQC,WAAlDJ,SAGRA,EAASK,KAAK,SAACC,EAAGC,GACjB,IAAMC,EAAQF,EAAEG,WAAWC,KACrBC,EAAQJ,EAAEE,WAAWC,KAC3B,OAAOF,EAAMI,cAAcD,EAAO,KAAM,CAAEE,YAAa,WAYxD,IAAMC,EAAcC,MAAMC,KACzB,IAAIC,IAAIjB,EAASkB,IAAI,SAAAC,GAAC,OAAIA,EAAEV,WAAWW,WACtCf,OAEFS,EAAYO,QAAQ,OAGhBP,EAAYQ,SAAS,eACxBR,EAAYS,OAAOT,EAAYU,QAAQ,cAAe,GAEnDV,EAAYQ,SAAS,4BACxBR,EAAYS,OACXT,EAAYU,QAAQ,2BACpB,GAIF,IAAMC,EAAUX,EAAYI,IAAI,SAAAQ,GAC/B,IAAMC,EAAe,GAEfC,EAAQC,YAA2B7B,EAAU0B,GAC7CI,EAAcC,YACnB/B,EACA0B,GAWD,OARAC,EAAalB,WAAa,CACzBmB,QACAI,KAAMN,EACNhB,KAAMgB,EACNN,OAAQM,EACRI,eAGMH,IAMR3B,EAASqB,QAAQ,CAChBZ,WAAY,CACXmB,MAAO,GACPI,KAAM,MACNtB,KAAM,MACNU,OAAQ,MACRU,YAAa,MASf,IAAMG,EAAUC,YACfhC,EACAA,EAAUC,QAAQC,UAClB,SAACE,EAAGC,GAAJ,OAAUD,IAAMC,IAkBjB,MAAO,CACN4B,eANoClC,YACpCmC,EACAA,EAAejC,QAAQkC,YAFhBrC,SAOPA,WACAyB,UACAQ","file":"1-5b085-bundle.js","sourcesContent":["import { feature, mesh } from \"topojson\"\nimport worldData from \"../data/countries-topo-reduced\"\nimport simplifiedData from \"../data/simplified-topo\"\nimport {\n\tgetSummedRegionCasesByYear,\n\tgetAverageRegionVaccinationByYear,\n} from \"./helpers\"\n\nconst formatData = () => {\n\t/**\n\t * FEATURES\n\t * An array of topojson features. Each an object containing:\n\t * {\n\t * \tgeometry: {}\n\t * \tproperties: {cases, code, name, region, vaccination }\n\t * \ttype: \"Feature\"\n\t * }\n\t * */\n\tconst { features } = feature(worldData, worldData.objects.countries)\n\n\t// Sort features by name alphabetically\n\tfeatures.sort((a, b) => {\n\t\tconst aName = a.properties.name\n\t\tconst bName = b.properties.name\n\t\treturn aName.localeCompare(bName, \"en\", { sensitivity: \"base\" })\n\t})\n\n\t/**\n\t * REGIONS\n\t * An array of objects, one for each region of the world with countries\n\t * containing data. Casses are summed by year and vaccinations are averaged\n\t * by year. Each object containing:\n\t * {\n\t * \tproperties: {cases, code, name, region, vaccination }\n\t * }\n\t * */\n\tconst regionNames = Array.from(\n\t\tnew Set(features.map(d => d.properties.region))\n\t).sort()\n\n\tregionNames.unshift(\"All\")\n\n\t// Remove the regions that don't have any relevant countries\n\tif (regionNames.includes(\"Antarctica\")) {\n\t\tregionNames.splice(regionNames.indexOf(\"Antarctica\"), 1)\n\t}\n\tif (regionNames.includes(\"Seven seas (open ocean)\")) {\n\t\tregionNames.splice(\n\t\t\tregionNames.indexOf(\"Seven seas (open ocean)\"),\n\t\t\t1\n\t\t)\n\t}\n\n\tconst regions = regionNames.map(regionName => {\n\t\tconst regionObject = {}\n\n\t\tconst cases = getSummedRegionCasesByYear(features, regionName)\n\t\tconst vaccination = getAverageRegionVaccinationByYear(\n\t\t\tfeatures,\n\t\t\tregionName\n\t\t)\n\n\t\tregionObject.properties = {\n\t\t\tcases,\n\t\t\tcode: regionName,\n\t\t\tname: regionName,\n\t\t\tregion: regionName,\n\t\t\tvaccination,\n\t\t}\n\n\t\treturn regionObject\n\t})\n\n\t// Add a placeholder country to represent no selection\n\t// Do this after the regions have been defined to prevent\n\t// adding a duplicate 'All'\n\tfeatures.unshift({\n\t\tproperties: {\n\t\t\tcases: {},\n\t\t\tcode: \"All\",\n\t\t\tname: \"All\",\n\t\t\tregion: \"All\",\n\t\t\tvaccination: {},\n\t\t},\n\t})\n\n\t/**\n\t * BORDERS\n\t * Single topojson object, just used to draw the borders between countries.\n\t * Third argument is filter function to eliminate overlapping borders.\n\t */\n\tconst borders = mesh(\n\t\tworldData,\n\t\tworldData.objects.countries,\n\t\t(a, b) => a !== b\n\t)\n\n\t/**\n\t * SIMPLE FEATURES\n\t * An array of simplified topojson features. Each an object containing:\n\t * Just used to zoom the map.\n\t * {\n\t * \tgeometry: {}\n\t * \tproperties: {altcode, code, name, region }\n\t * \ttype: \"Feature\"\n\t * }\n\t * */\n\tconst { features: simpleFeatures } = feature(\n\t\tsimplifiedData,\n\t\tsimplifiedData.objects.simplified\n\t)\n\n\treturn {\n\t\tsimpleFeatures,\n\t\tfeatures,\n\t\tregions,\n\t\tborders,\n\t}\n}\n\nexport default formatData\n"],"sourceRoot":""}